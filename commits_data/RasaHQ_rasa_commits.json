{
  "repo_name": "RasaHQ/rasa",
  "commits": [
    {
      "sha": "87458edfae6f75797659b9423955db5cb6c8d3a1",
      "message": "use ValueError instead of TypeError",
      "changes": [
        {
          "file": "rasa/core/featurizers.py",
          "patch": "@@ -392,7 +392,7 @@ def featurize_trackers(\n         \"\"\"Create training data.\"\"\"\n \n         if self.state_featurizer is None:\n-            raise TypeError(\n+            raise ValueError(\n                 \"Variable 'state_featurizer' is not set. Provide \"\n                 \"'SingleStateFeaturizer' class to featurize trackers.\"\n             )"
        }
      ]
    },
    {
      "sha": "6d4a8ee4cf734d0b7d70d6eb841b15634580aea5",
      "message": "Fix TypeError with SklearnPolicy\n\nWhen training `SklearnPolicy` the method to retrieve the\nmodel failed when non-featurizer parameters were passed to\n`.train`, e.g. failing with:\n\n    TypeError: model_architecture() got an unexpected keyword\n               argument 'dump_stories'\n\nWhile `model_architecture` filtered the params, at some point\nthe `**kwargs` parameter was lost. This issue is fixed\nby reintroducing the parameter and updating the training\nparameters with the `kwargs` passed to `train`.",
      "changes": [
        {
          "file": "tests/core/test_policies.py",
          "patch": "@@ -295,6 +295,12 @@ def tracker(self, default_domain):\n     async def trackers(self, default_domain):\n         return await train_trackers(default_domain, augmentation_factor=20)\n \n+    def test_additional_train_args_do_not_raise(\n+        self, mock_search, default_domain, trackers, featurizer, priority\n+    ):\n+        policy = self.create_policy(featurizer=featurizer, priority=priority, cv=None)\n+        policy.train(trackers, domain=default_domain, this_is_not_a_feature=True)\n+\n     def test_cv_none_does_not_trigger_search(\n         self, mock_search, default_domain, trackers, featurizer, priority\n     ):"
        }
      ]
    },
    {
      "sha": "4c92eb9d718e42f7242863ae5fc164f5d7861c41",
      "message": "NameError changed to ValueError",
      "changes": [
        {
          "file": "rasa_nlu/classifiers/embedding_intent_classifier.py",
          "patch": "@@ -342,9 +342,9 @@ def _tf_sim(self, a, b):\n \n             return sim, sim_emb\n         else:\n-            raise NameError(\"Wrong similarity type {}, \"\n-                            \"should be 'cosine' or 'inner'\"\n-                            \"\".format(self.similarity_type))\n+            raise ValueError(\"Wrong similarity type {}, \"\n+                             \"should be 'cosine' or 'inner'\"\n+                             \"\".format(self.similarity_type))\n \n     def _tf_loss(self, sim, sim_emb):\n         \"\"\"Define loss\"\"\""
        }
      ]
    },
    {
      "sha": "708afe4de7a5ffadf820f3971eb9e3b5ecc58504",
      "message": "Fix AttributeError: 'Namespace' object has no attribute 'verbose'",
      "changes": [
        {
          "file": "rasa_core/server.py",
          "patch": "@@ -173,7 +173,7 @@ def version(self, request):\n \n     rasa = RasaCoreServer(cmdline_args.core,\n                           cmdline_args.nlu,\n-                          cmdline_args.verbose,\n+                          cmdline_args.loglevel,\n                           cmdline_args.log_file,\n                           cmdline_args.cors)\n "
        }
      ]
    }
  ]
}