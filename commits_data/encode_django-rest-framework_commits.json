{
  "repo_name": "encode/django-rest-framework",
  "commits": [
    {
      "sha": "6f2c0dbf4d9180641febdf42c3f3f0c39bcb0e5a",
      "message": "permissions must return a boolean\n\n`x and y` actually returns object y when both are true. the means P & IsAuthenticated will fail with TypeError: unsupported operand type(s) for &: 'instance' and 'bool' as IsAuthenticated now returns a CallableBool which does not overload __ror__",
      "changes": [
        {
          "file": "rest_framework/permissions.py",
          "patch": "@@ -110,7 +110,7 @@ class IsAuthenticated(BasePermission):\n     \"\"\"\n \n     def has_permission(self, request, view):\n-        return request.user and request.user.is_authenticated\n+        return bool(request.user and request.user.is_authenticated)\n \n \n class IsAdminUser(BasePermission):\n@@ -119,7 +119,7 @@ class IsAdminUser(BasePermission):\n     \"\"\"\n \n     def has_permission(self, request, view):\n-        return request.user and request.user.is_staff\n+        return bool(request.user and request.user.is_staff)\n \n \n class IsAuthenticatedOrReadOnly(BasePermission):\n@@ -128,7 +128,7 @@ class IsAuthenticatedOrReadOnly(BasePermission):\n     \"\"\"\n \n     def has_permission(self, request, view):\n-        return (\n+        return bool(\n             request.method in SAFE_METHODS or\n             request.user and\n             request.user.is_authenticated"
        }
      ]
    },
    {
      "sha": "e704dd2e404b31f77831eebbb44aa6042a42b332",
      "message": "Add import for TextLexer. (#5512)\n\nIf pygments did not recognize the language name it was being passed,\r\nthis would raise a `NameError` because `TextLexer` import was missing.",
      "changes": [
        {
          "file": "rest_framework/compat.py",
          "patch": "@@ -214,7 +214,7 @@ def apply_markdown(text):\n \n try:\n     import pygments\n-    from pygments.lexers import get_lexer_by_name\n+    from pygments.lexers import get_lexer_by_name, TextLexer\n     from pygments.formatters import HtmlFormatter\n \n     def pygments_highlight(text, lang, style):"
        }
      ]
    },
    {
      "sha": "714607307ed0a5141779b9758d3cd33ac698021f",
      "message": "Fixes AttributeError in HTMLFormRenderer.render\n\nIf `HTMLFormRenderer.render` will be called with default arguments,\n`AttributeError: 'NoneType' object has no attribute 'get'` will be raised.",
      "changes": [
        {
          "file": "rest_framework/renderers.py",
          "patch": "@@ -341,6 +341,7 @@ def render(self, data, accepted_media_type=None, renderer_context=None):\n         \"\"\"\n         Render serializer data and return an HTML form, as a string.\n         \"\"\"\n+        renderer_context = renderer_context or {}\n         form = data.serializer\n \n         style = renderer_context.get('style', {})"
        }
      ]
    },
    {
      "sha": "f0bced64134b10c2cafbb206c04fe0fa774d205d",
      "message": "Handle AttributeError as well (when the imported module exists but\nthe specified function/class does not).",
      "changes": [
        {
          "file": "rest_framework/settings.py",
          "patch": "@@ -171,7 +171,7 @@ def import_from_string(val, setting_name):\n         module_path, class_name = '.'.join(parts[:-1]), parts[-1]\n         module = importlib.import_module(module_path)\n         return getattr(module, class_name)\n-    except ImportError as e:\n+    except (ImportError, AttributeError) as e:\n         msg = \"Could not import '%s' for API setting '%s'. %s: %s.\" % (val, setting_name, e.__class__.__name__, e)\n         raise ImportError(msg)\n "
        }
      ]
    },
    {
      "sha": "760b25bc20a1434cbdd69dc0b13bacdc3bbedd7c",
      "message": "Fix AttributeError on renamed _field_mapping",
      "changes": [
        {
          "file": "rest_framework/serializers.py",
          "patch": "@@ -1330,13 +1330,13 @@ def get_unique_for_date_validators(self):\n \n \n if hasattr(models, 'UUIDField'):\n-    ModelSerializer._field_mapping[models.UUIDField] = UUIDField\n+    ModelSerializer.serializer_field_mapping[models.UUIDField] = UUIDField\n \n if postgres_fields:\n     class CharMappingField(DictField):\n         child = CharField()\n \n-    ModelSerializer._field_mapping[postgres_fields.HStoreField] = CharMappingField\n+    ModelSerializer.serializer_field_mapping[postgres_fields.HStoreField] = CharMappingField\n \n \n class HyperlinkedModelSerializer(ModelSerializer):"
        }
      ]
    },
    {
      "sha": "6d2ca75d8e2403a17fa7cb2d112f5241a0247226",
      "message": "Don't raise AttributeError on views with no model or queryset, when using DjangoModelPermissions",
      "changes": [
        {
          "file": "rest_framework/permissions.py",
          "patch": "@@ -128,7 +128,7 @@ def has_permission(self, request, view):\n \n         # Workaround to ensure DjangoModelPermissions are not applied\n         # to the root view when using DefaultRouter.\n-        if model_cls is None and getattr(view, '_ignore_model_permissions'):\n+        if model_cls is None and getattr(view, '_ignore_model_permissions', False):\n             return True\n \n         assert model_cls, ('Cannot apply DjangoModelPermissions on a view that'"
        }
      ]
    },
    {
      "sha": "a91841f7fe91f79a18a1f4f0352ec3e07f389a0a",
      "message": "WORKAROUND: avoid errors like \"AttributeError: 'APIRoot' object has no attribute 'get_serializer'\"",
      "changes": [
        {
          "file": "rest_framework/views.py",
          "patch": "@@ -80,6 +80,8 @@ def _generate_action_metadata(self, request):\n                 self.check_permissions(cloned_request)\n \n                 # TODO: find right placement - APIView does not have get_serializer\n+                if not hasattr(self, 'get_serializer'):\n+                    continue\n                 serializer = self.get_serializer()\n                 if serializer is not None:\n                     field_name_types = {}"
        }
      ]
    },
    {
      "sha": "4fc3b1ba56239a1fb999f9aef99cdbcfbc9aa254",
      "message": "Add timedelta encoder to the JSONEncoder class.\n\nWhilst this commit adds *encoding* of timedeltas to a string of a floating\npoint value of the seconds, you must add your own serializer field for\nwhatever timedelta model field you are using. This is because Django doesn't\nsupport any kind of timedelta field out-of-the-box, so you have to either\nimplement your own or use django-timedelta.\n\nIf this is the case and you want to serialise timedelta input, you will have\nto implement your own special field to use for the timedelta, which is not\nincluded in core as it is based on a 3rd party library. Here is an example:\n\n    import datetime\n    import timedelta\n    from django import forms\n    from django.core import validators\n    from django.core.exceptions import ValidationError\n    from django.utils.translation import ugettext_lazy as _\n    from rest_framework.fields import WritableField\n\n    class TimedeltaField(WritableField):\n        type_name = 'TimedeltaField'\n        form_field_class = forms.FloatField\n\n        default_error_messages = {\n            'invalid': _(\"'%s' value must be in seconds.\"),\n        }\n\n        def from_native(self, value):\n            if value in validators.EMPTY_VALUES:\n                return None\n\n            try:\n                return datetime.timedelta(seconds=float(value))\n            except (TypeError, ValueError):\n                msg = self.error_messages['invalid'] % value\n                raise ValidationError(msg)\n\nWhich is based on the FloatField. This field can then be used in\nyour serializer like this:\n\n    from yourapp.fields import TimedeltaField\n\n    class YourSerializer(serializers.ModelSerializer):\n        duration = TimedeltaField()",
      "changes": [
        {
          "file": "rest_framework/utils/encoders.py",
          "patch": "@@ -12,7 +12,7 @@\n \n class JSONEncoder(json.JSONEncoder):\n     \"\"\"\n-    JSONEncoder subclass that knows how to encode date/time,\n+    JSONEncoder subclass that knows how to encode date/time/timedelta,\n     decimal types, and generators.\n     \"\"\"\n     def default(self, o):\n@@ -34,6 +34,8 @@ def default(self, o):\n             if o.microsecond:\n                 r = r[:12]\n             return r\n+        elif isinstance(o, datetime.timedelta):\n+            return str(o.total_seconds())\n         elif isinstance(o, decimal.Decimal):\n             return str(o)\n         elif hasattr(o, '__iter__'):"
        }
      ]
    },
    {
      "sha": "919aff329ee1bd214831095e4d96af71795ed572",
      "message": "Fix AttributeError caused by accessing a non-existing default_keys attribute.",
      "changes": [
        {
          "file": "rest_framework/serializers.py",
          "patch": "@@ -123,7 +123,7 @@ def get_excluded_fieldnames(self):\n         Returns the fieldnames that should not be validated.\n         \"\"\"\n         excluded_fields = list(self.opts.exclude)\n-        for field in self.fields.keys() + self.default_fields.keys():\n+        for field in self.fields.keys() + self.get_default_fields().keys():\n             if self.opts.fields:\n                 if field not in self.opts.fields + self.opts.exclude:\n                     excluded_fields.append(field)"
        }
      ]
    },
    {
      "sha": "5d6962825015b3d68826584c50739750d9b3c5c5",
      "message": "Update rest_framework/serializers.py\n\nfixed AttributeError in case restore_object is overwritten without explicitly setting self.m2m_data",
      "changes": [
        {
          "file": "rest_framework/serializers.py",
          "patch": "@@ -458,7 +458,7 @@ def save(self, save_m2m=True):\n         \"\"\"\n         self.object.save()\n \n-        if self.m2m_data and save_m2m:\n+        if getattr(self, 'm2m_data', None) and save_m2m:\n             for accessor_name, object_list in self.m2m_data.items():\n                 setattr(self.object, accessor_name, object_list)\n             self.m2m_data = {}"
        }
      ]
    },
    {
      "sha": "e3c00e4c1e0d64c8b0f0b04e6e7a7e1a308099f2",
      "message": "Fixed TypeError that occurs without request data.\r\nIf no request data gets sent, allowed_extra_fields is a set and can't be joined to a tuple using the + operator.",
      "changes": [
        {
          "file": "djangorestframework/resources.py",
          "patch": "@@ -111,7 +111,7 @@ def _validate(self, data, files, allowed_extra_fields=(), fake_data=None):\n         # To get around this case we revalidate with some fake data. \n         if fake_data:\n             data[fake_data] = '_fake_data'\n-            allowed_extra_fields = allowed_extra_fields + ('_fake_data',)\n+            allowed_extra_fields = tuple(allowed_extra_fields) + ('_fake_data',)\n         \n         bound_form = self.get_bound_form(data, files)\n "
        }
      ]
    }
  ]
}