{
  "repo_name": "openedx/edx-platform",
  "commits": [
    {
      "sha": "f679768f9e7c49a872b0c6d8fdd7811fa714b79e",
      "message": "BOM-925\nFixing TypeError, the JSON object must be str, not 'bytes'.",
      "changes": [
        {
          "file": "lms/djangoapps/verify_student/tests/test_views.py",
          "patch": "@@ -1637,7 +1637,7 @@ def _assert_user_name(self, full_name):\n     def _get_post_data(self):\n         \"\"\"Retrieve POST data from the last request. \"\"\"\n         last_request = moto.packages.httpretty.last_request()\n-        return json.loads(last_request.body)\n+        return json.loads(last_request.body.decode('utf-8'))\n \n \n class TestPhotoVerificationResultsCallback(ModuleStoreTestCase):"
        }
      ]
    },
    {
      "sha": "f7adc71c4453f68dc40b74788ebf9c1d0f33c6d4",
      "message": "BOM-924\nFixing TypeError, the JSON object must be str, not 'bytes'.",
      "changes": [
        {
          "file": "openedx/tests/xblock_integration/test_crowdsource_hinter.py",
          "patch": "@@ -3,9 +3,9 @@\n \"\"\"\n from __future__ import absolute_import\n \n-import json\n import unittest\n \n+import simplejson as json\n from django.conf import settings\n from django.urls import reverse\n from six import text_type"
        }
      ]
    },
    {
      "sha": "355826f7d87d1be662370cd6ce23e34f60d3bcca",
      "message": "Don't try to show anonymous users the first-purchase discount\n\nThis fixes errors like:\n\n    Oct 10 12:46:07 ip-10-2-10-15 [service_variant=lms][django.request][env:prod-edx-edxapp] ERROR [ip-10-2-10-15  31278] [user None] [exception.py:135] - Internal Server Error: /courses/course-v1:HarvardX+1962USRx+3T2019/discussions/settings\n    Traceback (most recent call last):\n    File \"/edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/core/handlers/exception.py\", line 41, in inner\n        response = get_response(request)\n    File \"/edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/core/handlers/base.py\", line 249, in _legacy_get_response\n        response = self._get_response(request)\n    File \"/edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/core/handlers/base.py\", line 187, in _get_response\n        response = self.process_exception_by_middleware(e, request)\n    File \"/edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/core/handlers/base.py\", line 185, in _get_response\n        response = wrapped_callback(request, *callback_args, **callback_kwargs)\n    File \"/edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/utils/decorators.py\", line 185, in inner\n        return func(*args, **kwargs)\n    File \"/edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/newrelic/hooks/framework_django.py\", line 539, in wrapper\n        return wrapped(*args, **kwargs)\n    File \"/edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/views/decorators/http.py\", line 40, in inner\n        return func(request, *args, **kwargs)\n    File \"/edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/utils/decorators.py\", line 149, in _wrapped_view\n        response = view_func(request, *args, **kwargs)\n    File \"/edx/app/edxapp/edx-platform/common/djangoapps/util/json_request.py\", line 55, in parse_json_into_request\n        return view_function(request, *args, **kwargs)\n    File \"/edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/contrib/auth/decorators.py\", line 23, in _wrapped_view\n        return view_func(request, *args, **kwargs)\n    File \"/edx/app/edxapp/edx-platform/lms/djangoapps/discussion/views.py\", line 936, in course_discussions_settings_handler\n        course, discussion_settings\n    File \"/edx/app/edxapp/edx-platform/lms/djangoapps/discussion/views.py\", line 957, in get_divided_discussions\n        all_discussions = utils.get_discussion_categories_ids(course, None, include_all=True)\n    File \"/edx/app/edxapp/edx-platform/lms/djangoapps/discussion/django_comment_client/utils.py\", line 485, in get_discussion_categories_ids\n        xblock.discussion_id for xblock in get_accessible_discussion_xblocks(course, user, include_all=include_all)\n    File \"/edx/app/edxapp/edx-platform/lms/djangoapps/discussion/django_comment_client/utils.py\", line 146, in get_accessible_discussion_xblocks\n        return get_accessible_discussion_xblocks_by_course_id(course.id, user, include_all=include_all)\n    File \"/edx/app/edxapp/edx-platform/openedx/core/lib/cache_utils.py\", line 73, in decorator\n        result = wrapped(*args, **kwargs)\n    File \"/edx/app/edxapp/edx-platform/lms/djangoapps/discussion/django_comment_client/utils.py\", line 159, in get_accessible_discussion_xblocks_by_course_id\n        if has_required_keys(xblock) and (include_all or has_access(user, 'load', xblock, course_id))\n    File \"/edx/app/edxapp/edx-platform/lms/djangoapps/courseware/access.py\", line 158, in has_access\n        return _has_access_descriptor(user, action, obj, course_key)\n    File \"/edx/app/edxapp/edx-platform/lms/djangoapps/courseware/access.py\", line 572, in _has_access_descriptor\n        return _dispatch(checkers, action, user, descriptor)\n    File \"/edx/app/edxapp/edx-platform/lms/djangoapps/courseware/access.py\", line 669, in _dispatch\n        result = table[action]()\n    File \"/edx/app/edxapp/edx-platform/lms/djangoapps/courseware/access.py\", line 543, in can_load\n        group_access_response = _has_group_access(descriptor, user, course_key)\n    File \"/edx/app/edxapp/edx-platform/lms/djangoapps/courseware/access.py\", line 513, in _has_group_access\n        user_fragment=partition.access_denied_fragment(descriptor, user, user_group, allowed_groups),\n    File \"/edx/app/edxapp/edx-platform/openedx/features/content_type_gating/partitions.py\", line 98, in access_denied_fragment\n        upgrade_price, _ = format_strikeout_price(user, course)\n    File \"/edx/app/edxapp/edx-platform/openedx/features/discounts/utils.py\", line 22, in format_strikeout_price\n        if can_receive_discount(user, course):\n    File \"/edx/app/edxapp/edx-platform/openedx/features/discounts/applicability.py\", line 74, in can_receive_discount\n        if CourseEnrollment.objects.filter(user=user).exclude(mode__in=CourseMode.UPSELL_TO_VERIFIED_MODES).exists():\n    File \"/edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/db/models/manager.py\", line 85, in manager_method\n        return getattr(self.get_queryset(), name)(*args, **kwargs)\n    File \"/edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/db/models/query.py\", line 787, in filter\n        return self._filter_or_exclude(False, *args, **kwargs)\n    File \"/edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/db/models/query.py\", line 805, in _filter_or_exclude\n        clone.query.add_q(Q(*args, **kwargs))\n    File \"/edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/db/models/sql/query.py\", line 1250, in add_q\n        clause, _ = self._add_q(q_object, self.used_aliases)\n    File \"/edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/db/models/sql/query.py\", line 1276, in _add_q\n        allow_joins=allow_joins, split_subq=split_subq,\n    File \"/edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/db/models/sql/query.py\", line 1206, in build_filter\n        condition = lookup_class(lhs, value)\n    File \"/edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/db/models/lookups.py\", line 24, in __init__\n        self.rhs = self.get_prep_lookup()\n    File \"/edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/db/models/fields/related_lookups.py\", line 112, in get_prep_lookup\n        self.rhs = target_field.get_prep_value(self.rhs)\n    File \"/edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/db/models/fields/__init__.py\", line 966, in get_prep_value\n        return int(value)\n    TypeError: int() argument must be a string or a number, not 'AnonymousUser'\n\nThis is tracked in https://openedx.atlassian.net/browse/REV-988\n[REV-988]",
      "changes": [
        {
          "file": "openedx/features/discounts/applicability.py",
          "patch": "@@ -69,6 +69,9 @@ def can_receive_discount(user, course):  # pylint: disable=unused-argument\n     if DiscountRestrictionConfig.disabled_for_course_stacked_config(course):\n         return False\n \n+    if user.is_anonymous:\n+        return False\n+\n     # Don't allow users who have enrolled in any courses in non-upsellable\n     # modes\n     if CourseEnrollment.objects.filter(user=user).exclude(mode__in=CourseMode.UPSELL_TO_VERIFIED_MODES).exists():"
        }
      ]
    },
    {
      "sha": "77ac61212b1a15dc00c4938dddfd7e87b39a474b",
      "message": "Updates for TypeError in Python 3",
      "changes": [
        {
          "file": "cms/djangoapps/contentstore/tests/test_orphan.py",
          "patch": "@@ -93,7 +93,7 @@ def test_get_orphans(self, default_store):\n             self.client.get(\n                 orphan_url,\n                 HTTP_ACCEPT='application/json'\n-            ).content\n+            ).content.decode('utf-8')\n         )\n         self.assertEqual(len(orphans), 3, u\"Wrong # {}\".format(orphans))\n         location = course.location.replace(category='chapter', name='OrphanChapter')\n@@ -119,7 +119,7 @@ def test_delete_orphans(self, default_store, max_mongo_calls, min_mongo_calls):\n             self.client.delete(orphan_url)\n \n         orphans = json.loads(\n-            self.client.get(orphan_url, HTTP_ACCEPT='application/json').content\n+            self.client.get(orphan_url, HTTP_ACCEPT='application/json').content.decode('utf-8')\n         )\n         self.assertEqual(len(orphans), 0, u\"Orphans not deleted {}\".format(orphans))\n "
        }
      ]
    },
    {
      "sha": "05e1ec5bc0ab5fff3c494781a13f60330e66bed6",
      "message": "Fix \"TypeError: cannot use a string pattern on a bytes-like object\" in cookies.py",
      "changes": [
        {
          "file": "openedx/core/djangoapps/user_authn/cookies.py",
          "patch": "@@ -74,7 +74,7 @@ def delete_logged_in_cookies(response):\n     \"\"\"\n     for cookie_name in ALL_LOGGED_IN_COOKIE_NAMES:\n         response.delete_cookie(\n-            cookie_name.encode('utf-8'),\n+            cookie_name,\n             path='/',\n             domain=settings.SESSION_COOKIE_DOMAIN\n         )\n@@ -139,6 +139,7 @@ def set_logged_in_cookies(request, response, user):\n     # Note: The user may not yet be set on the request object by this time,\n     # especially during third party authentication.  So use the user object\n     # that is passed in when needed.\n+\n     if user.is_authenticated and not user.is_anonymous:\n \n         # JWT cookies expire at the same time as other login-related cookies\n@@ -182,7 +183,7 @@ def _set_deprecated_user_info_cookie(response, request, user, cookie_settings):\n     \"\"\"\n     user_info = _get_user_info_cookie_data(request, user)\n     response.set_cookie(\n-        settings.EDXMKTG_USER_INFO_COOKIE_NAME.encode('utf-8'),\n+        settings.EDXMKTG_USER_INFO_COOKIE_NAME,\n         json.dumps(user_info),\n         **cookie_settings\n     )\n@@ -196,7 +197,7 @@ def _set_deprecated_logged_in_cookie(response, cookie_settings):\n     # In the future, we should be able to replace this with the \"user info\"\n     # cookie set below.\n     response.set_cookie(\n-        settings.EDXMKTG_LOGGED_IN_COOKIE_NAME.encode('utf-8'),\n+        settings.EDXMKTG_LOGGED_IN_COOKIE_NAME,\n         'true',\n         **cookie_settings\n     )"
        }
      ]
    },
    {
      "sha": "136b914d86d485c3a5b3dc4087ba453d67c29bae",
      "message": "Fixes error caused by invalid Anonymous User passed to a view.\n\nThis patch would fix the case when an anonymous object is\ngetting passed to view causing \"TypeError: int() argument must\nbe a string or a number, not 'AnonymousUser'\" exception. Applying a\npermission class would force user to be an authenticated\nuser otherwise would get a 403 response.\n\nLEARNER-4162",
      "changes": [
        {
          "file": "openedx/core/djangoapps/user_api/views.py",
          "patch": "@@ -14,6 +14,7 @@\n from rest_framework import authentication, generics, status, viewsets\n from rest_framework.exceptions import ParseError\n from rest_framework.views import APIView\n+from rest_framework.permissions import IsAuthenticated\n from six import text_type\n \n import accounts\n@@ -256,6 +257,7 @@ def get_queryset(self):\n class UpdateEmailOptInPreference(APIView):\n     \"\"\"View for updating the email opt in preference. \"\"\"\n     authentication_classes = (SessionAuthenticationAllowInactiveUser,)\n+    permission_classes = (IsAuthenticated,)\n \n     @method_decorator(require_post_params([\"course_id\", \"email_opt_in\"]))\n     @method_decorator(ensure_csrf_cookie)"
        }
      ]
    },
    {
      "sha": "5160909d3b084266c50b992f26220324d00438a9",
      "message": "EDUCATOR-793: converts TypeError,NotFoundError logging to debug only",
      "changes": [
        {
          "file": "common/lib/xmodule/xmodule/video_module/video_handlers.py",
          "patch": "@@ -239,7 +239,7 @@ def transcript(self, request, dispatch):\n             try:\n                 transcript = self.translation(request.GET.get('videoId', None), transcripts)\n             except (TypeError, NotFoundError) as ex:\n-                log.info(ex.message)\n+                log.debug(ex.message)\n                 # Try to return static URL redirection as last resort\n                 # if no translation is required\n                 return self.get_static_transcript(request, transcripts)"
        }
      ]
    },
    {
      "sha": "cb527f1e3922e96b7c2c8dd1d5d607944ecab134",
      "message": "Fix NameError issue for saml mangemement command",
      "changes": [
        {
          "file": "common/djangoapps/third_party_auth/management/commands/tests/__init__.py",
          "patch": "@@ -0,0 +1,3 @@\n+\"\"\"\n+This directory contains tests for third_party_auth app.\n+\"\"\""
        }
      ]
    },
    {
      "sha": "cea22a12ff06f818843b616ba172d8770e20f73b",
      "message": "Allow user partition version >= current version.\n\nIf code is deployed that updates the user partition version,\nthen the code is rolled back, we may see user partition versions\ngreater than the currently deployed version.\n\nThe previous behavior was to raise a TypeError when this occurred;\nthe new behavior assumes that the newer version is backwards\ncompatible and tries to load the partition.",
      "changes": [
        {
          "file": "common/lib/xmodule/xmodule/partitions/partitions.py",
          "patch": "@@ -161,7 +161,11 @@ def from_json(value):\n         if value[\"version\"] == 1:\n             # If no scheme was provided, set it to the default ('random')\n             scheme_id = UserPartition.VERSION_1_SCHEME\n-        elif value[\"version\"] == UserPartition.VERSION:\n+\n+        # Version changes should be backwards compatible in case the code\n+        # gets rolled back.  If we see a version number greater than the current\n+        # version, we should try to read it rather than raising an exception.\n+        elif value[\"version\"] >= UserPartition.VERSION:\n             if \"scheme\" not in value:\n                 raise TypeError(\"UserPartition dict {0} missing value key 'scheme'\".format(value))\n             scheme_id = value[\"scheme\"]"
        }
      ]
    },
    {
      "sha": "6b95ec8de23f5270c260c623f0b8748b84bbad86",
      "message": "Corrected NameError for invalid variable",
      "changes": [
        {
          "file": "lms/djangoapps/instructor/views/legacy.py",
          "patch": "@@ -1817,7 +1817,7 @@ def dump_grading_context(course):\n             notes = ''\n             if getattr(sdesc, 'score_by_attempt', False):\n                 notes = ', score by attempt!'\n-            msg += \"      %s (grade_format=%s, Assignment=%s%s)\\n\" % (s.display_name, grade_format, aname, notes)\n+            msg += \"      %s (grade_format=%s, Assignment=%s%s)\\n\" % (sdesc.display_name, grade_format, aname, notes)\n     msg += \"all descriptors:\\n\"\n     msg += \"length=%d\\n\" % len(gcontext['all_descriptors'])\n     msg = '<pre>%s</pre>' % msg.replace('<', '&lt;')"
        }
      ]
    },
    {
      "sha": "7bb780335dd6578dc593368b044e8a2bf2d73bef",
      "message": "Correct UnboundLocalError exception in student_migration_35",
      "changes": [
        {
          "file": "common/djangoapps/student/migrations/0035_access_roles.py",
          "patch": "@@ -97,7 +97,7 @@ def _migrate_users(correct_course_key, role, lower_org):\n                         if correct_course_key is None:\n                             hold.setdefault(course_id_string, []).append(group)\n                         else:\n-                            _migrate_users(correct_course_key, role, course_key.org)\n+                            _migrate_users(correct_course_key, role, correct_course_key.org)\n \n         # see if any in hold were missed above\n         for held_auth_scope, groups in hold.iteritems():"
        }
      ]
    },
    {
      "sha": "2f8d7e8cbed530694063b80dfa644b94339b52ae",
      "message": "Fix @feanil Traceback from Logs(TypeError: 'SlashSeparatedCourseKey' object is not iterable)",
      "changes": [
        {
          "file": "common/lib/xmodule/xmodule/open_ended_grading_classes/controller_query_service.py",
          "patch": "@@ -37,7 +37,7 @@ def check_for_eta(self, location):\n     def check_combined_notifications(self, course_id, student_id, user_is_staff, last_time_viewed):\n         params = {\n             'student_id': student_id,\n-            'course_id': course_id,\n+            'course_id': course_id.to_deprecated_string(),\n             'user_is_staff': user_is_staff,\n             'last_time_viewed': last_time_viewed,\n         }"
        }
      ]
    }
  ]
}