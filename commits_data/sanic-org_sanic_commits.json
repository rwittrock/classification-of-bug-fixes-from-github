{
  "repo_name": "sanic-org/sanic",
  "commits": [
    {
      "sha": "bd6dbd9090049d149bdab1826b6b0ce9d122b92c",
      "message": "Fix TypeError when use Blueprint.group() to group blueprint with default url_prefix, Use os.path.normpath to avoid invalid url_prefix like api//v1",
      "changes": [
        {
          "file": "sanic/blueprints.py",
          "patch": "@@ -1,3 +1,4 @@\n+import os\n from collections import defaultdict, namedtuple\n \n from sanic.constants import HTTP_METHODS\n@@ -54,7 +55,10 @@ def chain(nested):\n                     yield i\n         bps = []\n         for bp in chain(blueprints):\n+            if bp.url_prefix is None:\n+                bp.url_prefix = ''\n             bp.url_prefix = url_prefix + bp.url_prefix\n+            bp.url_prefix = os.path.normpath(bp.url_prefix)\n             bps.append(bp)\n         return bps\n "
        }
      ]
    },
    {
      "sha": "4c7675939aa2b4cb3c3fcc08f9e62a7c8a6d4366",
      "message": "Fix \"TypeError: not all arguments converted during string formatting\"\n\nsocket.getpeername() returns AF_INET6 address family four-tuple, with\nflowid and scopeid.\n\nIn server's write_response, an exception is raised when an IPv6 client\nconnects due to four-tuple elements having two unused elements (flowid\nand scopeid).\n\nThis makes sure that only the first two (host and port) are used in log\nstring formatting.",
      "changes": [
        {
          "file": "sanic/server.py",
          "patch": "@@ -201,7 +201,7 @@ def write_response(self, response):\n                 netlog.info('', extra={\n                     'status': response.status,\n                     'byte': len(response.body),\n-                    'host': '%s:%d' % self.request.ip,\n+                    'host': '%s:%d' % (self.request.ip[0], self.request.ip[1]),\n                     'request': '%s %s' % (self.request.method,\n                                           self.request.url)\n                 })"
        }
      ]
    },
    {
      "sha": "ae09dec05e10816b37eed425c87e193d230c5a73",
      "message": "fixed `UnboundLocalError`",
      "changes": [
        {
          "file": "sanic/static.py",
          "patch": "@@ -48,7 +48,7 @@ async def _handler(request, file_uri=None):\n         # Merge served directory and requested file if provided\n         # Strip all / that in the beginning of the URL to help prevent python\n         # from herping a derp and treating the uri as an absolute path\n-        root_path = file_or_directory\n+        root_path = file_path = file_or_directory\n         if file_uri:\n             file_path = path.join(\n                 file_or_directory, sub('^[/]*', '', file_uri))"
        }
      ]
    },
    {
      "sha": "1b65b2e0c658dc0e87a5a93f3e3665782b01edef",
      "message": "fix(blueprints): @middleware IndexError (#139)",
      "changes": [
        {
          "file": "sanic/blueprints.py",
          "patch": "@@ -109,8 +109,9 @@ def register_middleware(middleware):\n \n         # Detect which way this was called, @middleware or @middleware('AT')\n         if len(args) == 1 and len(kwargs) == 0 and callable(args[0]):\n+            middleware = args[0]\n             args = []\n-            return register_middleware(args[0])\n+            return register_middleware(middleware)\n         else:\n             return register_middleware\n "
        }
      ]
    }
  ]
}