{
  "repo_name": "scipy/scipy",
  "commits": [
    {
      "sha": "248c30b2afcfc16b32b7f96eaaf9c5c75e8ece82",
      "message": "BUG: fix UnboundLocalError in Radau (scipy#10775) (#10802)",
      "changes": [
        {
          "file": "scipy/integrate/_ivp/radau.py",
          "patch": "@@ -98,6 +98,7 @@ def solve_collocation_system(fun, t, y, h, Z0, scale, tol,\n     dW_norm_old = None\n     dW = np.empty_like(W)\n     converged = False\n+    rate = None\n     for k in range(NEWTON_MAXITER):\n         for i in range(3):\n             F[i] = fun(t + ch[i], y + Z[i])\n@@ -118,8 +119,6 @@ def solve_collocation_system(fun, t, y, h, Z0, scale, tol,\n         dW_norm = norm(dW / scale)\n         if dW_norm_old is not None:\n             rate = dW_norm / dW_norm_old\n-        else:\n-            rate = None\n \n         if (rate is not None and (rate >= 1 or\n                 rate ** (NEWTON_MAXITER - k) / (1 - rate) * dW_norm > tol)):"
        }
      ]
    },
    {
      "sha": "6594caf4f806791f4a5951dedbf918e35cd6f220",
      "message": "MAINT: Catch `AttributeError` in `optimize` scalar func check",
      "changes": [
        {
          "file": "scipy/optimize/optimize.py",
          "patch": "@@ -697,7 +697,7 @@ def _approx_fprime_helper(xk, f, epsilon, args=(), f0=None):\n         if not np.isscalar(df):\n             try:\n                 df = df.item()\n-            except ValueError:\n+            except (ValueError, AttributeError):\n                 raise ValueError(\"The user-provided \"\n                                  \"objective function must \"\n                                  \"return a scalar value.\")"
        }
      ]
    },
    {
      "sha": "39e134763d22842e6eff566ba6cb851c766fe1c1",
      "message": "Fix empty constraint\n\nWhen using the empty constriant without this patch, I was getting an error [here](https://github.com/scipy/scipy/blob/5c342cd4335aab4835390fb36e4405b1a64407e5/scipy/optimize/_trustregion_constr/tr_interior_point.py#L93)\r\n\r\n```\r\nIndexError: arrays used as indices must be of integer (or boolean) type\r\n```",
      "changes": [
        {
          "file": "scipy/optimize/_trustregion_constr/canonical_constraint.py",
          "patch": "@@ -88,7 +88,7 @@ def jac(x):\n         def hess(x, v_eq, v_ineq):\n             return empty_hess\n \n-        return cls(0, 0, fun, jac, hess, np.empty(0))\n+        return cls(0, 0, fun, jac, hess, np.empty(0, dtype=np.bool))\n \n     @classmethod\n     def concatenate(cls, canonical_constraints, sparse_jacobian):"
        }
      ]
    },
    {
      "sha": "7d19a7b808cff6ed573306fee60e486f8692f06d",
      "message": "BUG: sparse.linalg: downgrade LinearOperator TypeError to warning\n\nRaising an error here was a backward compatibility break.\n\nMoreover, subclasses not implementing the _* methods is not necessarily\nan error, depending on the intent of the subclass so a warning is\nsufficient.",
      "changes": [
        {
          "file": "scipy/sparse/linalg/interface.py",
          "patch": "@@ -42,6 +42,8 @@\n \n from __future__ import division, print_function, absolute_import\n \n+import warnings\n+\n import numpy as np\n \n from scipy.sparse import isspmatrix\n@@ -136,8 +138,9 @@ def __new__(cls, *args, **kwargs):\n \n             if (type(obj)._matvec == LinearOperator._matvec\n                     and type(obj)._matmat == LinearOperator._matmat):\n-                raise TypeError(\"LinearOperator subclass should implement\"\n-                                \" at least one of _matvec and _matmat.\")\n+                warnings.warn(\"LinearOperator subclass should implement\"\n+                              \" at least one of _matvec and _matmat.\",\n+                              category=RuntimeWarning, stacklevel=2)\n \n             return obj\n "
        }
      ]
    },
    {
      "sha": "c06bd99c7cc5f2a7a284ea7ab315c49c4c8cf518",
      "message": "BUG: cdf2rdf: Correct check for paired complex numbers in stacked arrays\n\nThis prevents an IndexError",
      "changes": [
        {
          "file": "scipy/linalg/decomp.py",
          "patch": "@@ -1374,10 +1374,12 @@ def cdf2rdf(w, v):\n         M, n = w.shape\n \n     # get indices for each first pair of complex eigenvalues\n-    idx_im = argwhere(iscomplex(w))\n+    complex_mask = iscomplex(w)\n+    n_complex = complex_mask.sum(axis=-1)\n+    idx_im = argwhere(complex_mask)\n \n     # check if all complex eigenvalues have conjugate pairs\n-    if len(idx_im[::2, 0]) != len(idx_im[1::2, 0]):\n+    if not (n_complex % 2 == 0).all():\n         raise ValueError('expected complex-conjugate pairs of eigenvalues')\n \n     # all eigenvalues to diagonal form"
        }
      ]
    },
    {
      "sha": "c6a1fa054b2f021b9310acda6409b29ca6126ace",
      "message": "BUG: optimize: fixed \"IndexError: unsupported iterator index\", hopefully?\n\nThis particular system doesn't seem to like iterators used as indices? I should\nprobably make them all np.aranges anyway.",
      "changes": [
        {
          "file": "scipy/optimize/_linprog_ip.py",
          "patch": "@@ -766,7 +766,7 @@ def vstack(blocks):\n     A1 = hstack((A1, zeros((A1.shape[0], n_free))))\n     c = np.concatenate((c, np.zeros(n_free)))\n     A1[:, range(n_ub, A1.shape[1])] = -A1[:, i_free]\n-    c[range(n_ub, A1.shape[1])] = -c[i_free]\n+    c[np.arange(n_ub, A1.shape[1])] = -c[i_free]\n \n     # add slack variables\n     A2 = vstack([eye(A_ub.shape[0]), zeros((A_eq.shape[0], A_ub.shape[0]))])"
        }
      ]
    },
    {
      "sha": "12b43c4503d5030540ef334a25f6355b03ec2ed5",
      "message": "BUG: optimize: fixed \"IndexError: unsupported iterator index\", hopefully?\n\nThis particular system doesn't seem to like iterators used as indices? I should\nprobably make them all np.aranges anyway.",
      "changes": [
        {
          "file": "scipy/optimize/_linprog_ip.py",
          "patch": "@@ -766,7 +766,7 @@ def vstack(blocks):\n     A1 = hstack((A1, zeros((A1.shape[0], n_free))))\n     c = np.concatenate((c, np.zeros(n_free)))\n     A1[:, range(n_ub, A1.shape[1])] = -A1[:, i_free]\n-    c[range(n_ub, A1.shape[1])] = -c[i_free]\n+    c[np.arange(n_ub, A1.shape[1])] = -c[i_free]\n \n     # add slack variables\n     A2 = vstack([eye(A_ub.shape[0]), zeros((A_eq.shape[0], A_ub.shape[0]))])"
        }
      ]
    },
    {
      "sha": "7ef11a3d09a77f2d385edc9c28c3c4494b0633e0",
      "message": "fix TypeError while raising ValueError for invalid shape",
      "changes": [
        {
          "file": "scipy/sparse/linalg/interface.py",
          "patch": "@@ -152,7 +152,7 @@ def __init__(self, dtype, shape):\n \n         shape = tuple(shape)\n         if not isshape(shape):\n-            raise ValueError(\"invalid shape %r (must be 2-d)\" % shape)\n+            raise ValueError(\"invalid shape %r (must be 2-d)\" % (shape,))\n \n         self.dtype = dtype\n         self.shape = shape"
        }
      ]
    },
    {
      "sha": "2585429a76d16370ba2ce1566f04429d60e76a09",
      "message": "TST: Fix UnboundLocalError: local variable 'data' referenced before assignment on Windows\n\nCherry-picked from https://github.com/scipy/scipy/pull/7068",
      "changes": [
        {
          "file": "scipy/io/tests/test_wavfile.py",
          "patch": "@@ -80,21 +80,21 @@ def test_read_5():\n \n def test_read_fail():\n     for mmap in [False, True]:\n-        fp = open(datafile('example_1.nc'))\n+        fp = open(datafile('example_1.nc'), 'rb')\n         assert_raises(ValueError, wavfile.read, fp, mmap=mmap)\n         fp.close()\n \n \n def test_read_early_eof():\n     for mmap in [False, True]:\n-        fp = open(datafile('test-44100Hz-le-1ch-4bytes-early-eof.wav'))\n+        fp = open(datafile('test-44100Hz-le-1ch-4bytes-early-eof.wav'), 'rb')\n         assert_raises(ValueError, wavfile.read, fp, mmap=mmap)\n         fp.close()\n \n \n def test_read_incomplete_chunk():\n     for mmap in [False, True]:\n-        fp = open(datafile('test-44100Hz-le-1ch-4bytes-incomplete-chunk.wav'))\n+        fp = open(datafile('test-44100Hz-le-1ch-4bytes-incomplete-chunk.wav'), 'rb')\n         assert_raises(ValueError, wavfile.read, fp, mmap=mmap)\n         fp.close()\n "
        }
      ]
    },
    {
      "sha": "ec9b47bfca0fcd4c3835b30a2bcd5d28baa63fd5",
      "message": "Fix TypeError when applying scipy.linalg.expm to np.matrix",
      "changes": [
        {
          "file": "scipy/sparse/linalg/matfuncs.py",
          "patch": "@@ -746,7 +746,7 @@ def _fragment_2_1(X, T, s):\n     # Form X = r_m(2^-s T)\n     # Replace diag(X) by exp(2^-s diag(T)).\n     n = X.shape[0]\n-    diag_T = T.diagonal().copy()\n+    diag_T = np.ravel(T.diagonal().copy())\n \n     # Replace diag(X) by exp(2^-s diag(T)).\n     scale = 2 ** -s"
        }
      ]
    },
    {
      "sha": "b49a1e7afccbd968f7069d297280cfea81ba7e62",
      "message": "MAINT: refguide_check.py: avoid NameError under python 3",
      "changes": [
        {
          "file": "tools/refguide_check.py",
          "patch": "@@ -354,7 +354,12 @@ def check_rest(module, names, dots=True):\n     Returns: [(name, success_flag, output), ...]\n     \"\"\"\n \n-    skip_types = (dict, str, unicode, float, int)\n+    try:\n+        skip_types = (dict, str, unicode, float, int)\n+    except NameError:\n+        # python 3\n+        skip_types = (dict, str, float, int)\n+\n \n     results = []\n "
        }
      ]
    },
    {
      "sha": "df76220fa4b3ae58c85190c1a36f080e40e31ecb",
      "message": "Fix bug causing a TypeError in splrep when a runtime warning was issued.",
      "changes": [
        {
          "file": "scipy/interpolate/fitpack.py",
          "patch": "@@ -509,7 +509,7 @@ def splrep(x, y, w=None, xb=None, xe=None, k=3, task=0, s=None, t=None,\n         warnings.warn(RuntimeWarning(_mess))\n     if ier > 0 and not full_output:\n         if ier in [1, 2, 3]:\n-            warnings.warn(RuntimeWarning(+_iermess[ier][0]))\n+            warnings.warn(RuntimeWarning(_iermess[ier][0]))\n         else:\n             try:\n                 raise _iermess[ier][1](_iermess[ier][0])"
        }
      ]
    },
    {
      "sha": "47d2b502768c7049c950d8e8aa03f08a60c557c9",
      "message": "MAINT: sparse: remove botched try/except from input validation\n\nThe try block was catching everything but invalid input formats (e.g.,\nMemoryError); asarray and atleast_2d accept pretty much any input.\nIf there's something they don't accept, they should raise TypeError or\nValueError, not we.",
      "changes": [
        {
          "file": "scipy/sparse/coo.py",
          "patch": "@@ -172,10 +172,7 @@ def __init__(self, arg1, shape=None, dtype=None, copy=False):\n                 self.has_canonical_format = False\n             else:\n                 #dense argument\n-                try:\n-                    M = np.atleast_2d(np.asarray(arg1))\n-                except:\n-                    raise TypeError('invalid input format')\n+                M = np.atleast_2d(np.asarray(arg1))\n \n                 if M.ndim != 2:\n                     raise TypeError('expected dimension <= 2 array or matrix')"
        }
      ]
    },
    {
      "sha": "8e1b695e4e1ab80b7e815e9e950c0f8b69b19e19",
      "message": "BUG: Fix TypeError in scipy.optimize._trust-region.py when disp=True.\nSee ticket #4798.",
      "changes": [
        {
          "file": "scipy/optimize/_trustregion.py",
          "patch": "@@ -231,7 +231,7 @@ def _minimize_trust_region(fun, x0, args=(), jac=None, hess=None, hessp=None,\n             print(status_messages[warnflag])\n         else:\n             print('Warning: ' + status_messages[warnflag])\n-        print(\"         Current function value: %f\" % m())\n+        print(\"         Current function value: %f\" % m.fun)\n         print(\"         Iterations: %d\" % k)\n         print(\"         Function evaluations: %d\" % nfun[0])\n         print(\"         Gradient evaluations: %d\" % njac[0])"
        }
      ]
    },
    {
      "sha": "9438fb7d4c65d79246fcda2fb748076cce2fb1a6",
      "message": "BUG: Fixes #4594: scipy.optimize.linprog IndexError when a callback is provided\n\nThe bug appeared at the beginning of Phase 2, if Phase 1 successfully terminated with some of the artificial variables as pivots. These artificial variables were zero because the corresponding element in the last column of T was zero, which allowed all artificial variables to be eliminated and Phase 1 to terminate successfully. However, basis[:m] contained elements that were greater than the length of solution, which resulted in IndexError at solution[basis[:m]]. The remaining true (non-artificial) variables that are not included in basis[:m] are also zero. Therefore simply setting the length of solution to be large enough solves the problem.",
      "changes": [
        {
          "file": "scipy/optimize/_linprog.py",
          "patch": "@@ -305,7 +305,6 @@ def _solve_simplex(T, n, basis, maxiter=1000, phase=2, callback=None,\n     \"\"\"\n     nit = nit0\n     complete = False\n-    solution = np.zeros(T.shape[1]-1, dtype=np.float64)\n \n     if phase == 1:\n         m = T.shape[0]-2\n@@ -314,6 +313,12 @@ def _solve_simplex(T, n, basis, maxiter=1000, phase=2, callback=None,\n     else:\n         raise ValueError(\"Argument 'phase' to _solve_simplex must be 1 or 2\")\n \n+    if len(basis[:m]) == 0:\n+        solution = np.zeros(T.shape[1] - 1, dtype=np.float64)\n+    else:\n+        solution = np.zeros(max(T.shape[1] - 1, max(basis[:m]) + 1),\n+                            dtype=np.float64)\n+\n     while not complete:\n         # Find the pivot column\n         pivcol_found, pivcol = _pivot_col(T, tol, bland)"
        }
      ]
    },
    {
      "sha": "e395da9e1ffb87b704bb1e085510f27f5256928e",
      "message": "FIX: raise NotImplementedError, not NotImplemented\n\nor else raising this error raises an error:\r\n\r\nTypeError: 'NotImplementedType' object is not callable",
      "changes": [
        {
          "file": "scipy/fftpack/realtransforms.py",
          "patch": "@@ -221,7 +221,7 @@ def _dct(x, type, n=None, axis=-1, overwrite_x=False, normalize=None):\n     if n is None:\n         n = tmp.shape[axis]\n     else:\n-        raise NotImplemented(\"Padding/truncating not yet implemented\")\n+        raise NotImplementedError(\"Padding/truncating not yet implemented\")\n \n     if tmp.dtype == np.double:\n         if type == 1:\n@@ -435,7 +435,7 @@ def _dst(x, type, n=None, axis=-1, overwrite_x=False, normalize=None):\n     if n is None:\n         n = tmp.shape[axis]\n     else:\n-        raise NotImplemented(\"Padding/truncating not yet implemented\")\n+        raise NotImplementedError(\"Padding/truncating not yet implemented\")\n \n     if tmp.dtype == np.double:\n         if type == 1:"
        }
      ]
    },
    {
      "sha": "59a445965372b11bab527cc346bec2ff55debac7",
      "message": "Avoid cleanup if initialization stopped short by ImportError.\n\nWhen umfpack was not available, `UmfpackContext` did not finish initialization and raised an `ImportError`. If that error was caught, an `AttributeError` was raised because the `__del__` method tried to cleanup attributes that were never initialized.",
      "changes": [
        {
          "file": "scipy/sparse/linalg/dsolve/umfpack/umfpack.py",
          "patch": "@@ -309,7 +309,8 @@ def __init__(self, family='di', **kwargs):\n         self.control[UMFPACK_PRL] = 3\n \n     def __del__(self):\n-        self.free()\n+        if _um is not None:\n+            self.free()\n \n     ##\n     # 30.11.2005, c"
        }
      ]
    },
    {
      "sha": "fc509992a543c50156182367dc7adc0354f0303c",
      "message": "ENH: ltisys: make lti zpk initialization work with plain lists\n\nlti objects can be created from a 3-tuple of zero-pole-gain (zpk)\nvalues. However, the current code only accepts numpy.array arguments,\nnot plain lists.\n\nThis is OK:\n  >>> s = lti(array([]), array([-1]), 1)\n\nThis is not:\n  >>> s = lti([], [-1], 1)\n  [...]\n  AttributeError: 'list' object has no attribute 'shape'\n\nUsing plain Python lists is intuitive and user friendly, so make that\nwork as well.",
      "changes": [
        {
          "file": "scipy/signal/ltisys.py",
          "patch": "@@ -254,6 +254,9 @@ def __init__(self, *args, **kwords):\n             self.__dict__['A'], self.__dict__['B'], \\\n                                 self.__dict__['C'], \\\n                                 self.__dict__['D'] = zpk2ss(*args)\n+            # make sure we have numpy arrays\n+            self.zeros = numpy.asarray(self.zeros)\n+            self.poles = numpy.asarray(self.poles)\n             self.inputs = 1\n             if len(self.zeros.shape) > 1:\n                 self.outputs = self.zeros.shape[0]"
        }
      ]
    },
    {
      "sha": "4ba06a925c6824b57db0195ac3a08d023ece146a",
      "message": "Raise user-friendly error when parameters not specified.\n\nBefore, when size, footprint, and structure were not specified, functions raised an `IndexError` with no explanation.",
      "changes": [
        {
          "file": "scipy/ndimage/morphology.py",
          "patch": "@@ -1266,6 +1266,8 @@ def grey_erosion(input,  size = None, footprint = None, structure = None,\n            [0, 0, 0, 0, 0, 0, 0]])\n \n     \"\"\"\n+    if size is None and footprint is None and structure is None:\n+        raise ValueError(\"size, footprint or structure must be specified\")\n     return filters._min_or_max_filter(input, size, footprint, structure,\n                                       output, mode, cval, origin, 1)\n \n@@ -1406,6 +1408,8 @@ def grey_dilation(input,  size = None, footprint = None, structure = None,\n            [1, 1, 1, 1, 1, 1, 1]])\n \n     \"\"\"\n+    if size is None and footprint is None and structure is None:\n+        raise ValueError(\"size, footprint or structure must be specified\")\n     if structure is not None:\n         structure = numpy.asarray(structure)\n         structure = structure[tuple([slice(None, None, -1)] *"
        }
      ]
    },
    {
      "sha": "4f29f4f013a17426ce3fb84cd26b1fddcd2555dd",
      "message": "Fix NameError: name 'pilutil' is not defined",
      "changes": [
        {
          "file": "scipy/misc/__init__.py",
          "patch": "@@ -51,11 +51,15 @@ def info(object=None,maxwidth=76,output=sys.stdout,toplevel='scipy'):\n \n try:\n     from pilutil import *\n+    import pilutil\n     __all__ += pilutil.__all__\n+    del pilutil\n except ImportError:\n     pass\n \n+import common\n __all__ += common.__all__\n+del common\n \n from numpy.testing import Tester\n test = Tester().test"
        }
      ]
    },
    {
      "sha": "718e8395e7095cd4cc2382ae12ad1d40b73bc006",
      "message": "BUG: sparse: Incorrect formatting in the eigen() function of arpack.py resulted in a TypeError instead of a ValueError when a matrix with an invalid shape was given.",
      "changes": [
        {
          "file": "scipy/sparse/linalg/eigen/arpack/arpack.py",
          "patch": "@@ -383,7 +383,7 @@ def eigen(A, k=6, M=None, sigma=None, which='LM', v0=None,\n     \"\"\"\n     A = aslinearoperator(A)\n     if A.shape[0] != A.shape[1]:\n-        raise ValueError('expected square matrix (shape=%s)' % A.shape)\n+        raise ValueError('expected square matrix (shape=%s)' % (A.shape,))\n     n = A.shape[0]\n \n     matvec = lambda x : A.matvec(x)\n@@ -476,7 +476,7 @@ def eigen_symmetric(A, k=6, M=None, sigma=None, which='LM', v0=None,\n     \"\"\"\n     A = aslinearoperator(A)\n     if A.shape[0] != A.shape[1]:\n-        raise ValueError('expected square matrix (shape=%s)' % shape)\n+        raise ValueError('expected square matrix (shape=%s)' % (A.shape,))\n     n = A.shape[0]\n \n     if M is not None:\n@@ -513,7 +513,7 @@ def svd(A, k=6):\n     n, m = A.shape\n \n     if np.iscomplexobj(A):\n-        raise NotImplementedError(\"Complex support for sparse SVD not \" \\\n+        raise NotImplementedError(\"Complex support for sparse SVD not \"\n                                   \"implemented yet\")\n         op = lambda x: x.T.conjugate()\n     else:"
        }
      ]
    },
    {
      "sha": "71676a6a55d58d6bf27bd58f974692564970e1af",
      "message": "stats.distributions fix wrapcauchy._cdf IndexError ticket:1185",
      "changes": [
        {
          "file": "scipy/stats/distributions.py",
          "patch": "@@ -3798,15 +3798,17 @@ def _cdf(self, x, c):\n         c1 = x<pi\n         c2 = 1-c1\n         xp = extract( c1,x)\n-        valp = extract(c1,val)\n+        #valp = extract(c1,val)\n         xn = extract( c2,x)\n-        valn = extract(c2,val)\n+        #valn = extract(c2,val)\n         if (any(xn)):\n+            valn = extract(c2, np.ones_like(x)*val)\n             xn = 2*pi - xn\n             yn = tan(xn/2.0)\n             on = 1.0-1.0/pi*arctan(valn*yn)\n             place(output, c2, on)\n         if (any(xp)):\n+            valp = extract(c1, np.ones_like(x)*val)\n             yp = tan(xp/2.0)\n             op = 1.0/pi*arctan(valp*yp)\n             place(output, c1, op)"
        }
      ]
    }
  ]
}