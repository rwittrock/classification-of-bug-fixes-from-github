{
  "repo_name": "numpy/numpy",
  "commits": [
    {
      "sha": "3238a0d7d003fb869ca106b18365162a78a7d4e0",
      "message": "BUG: Fix format statement associated with AttributeError.\n\nBefore this fix, a reference such as `numpy.wxyz` produced an\nincorrect error message because of the invalid format specifiers\nin the error message string:\n\n    >>> import numpy\n    >>> numpy.wxyz\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n      File \"/.../numpy/__init__.py\", line 206, in __getattr__\n        \"module %s has no attribute $s\".format(__name__, attr))\n    AttributeError: module %s has no attribute $s\n\nAfter the fix:\n\n    >>> import numpy\n    >>> numpy.wxyz\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n      File \"/.../numpy/__init__.py\", line 206, in __getattr__\n        \"{!r}\".format(__name__, attr))\n    AttributeError: module 'numpy' has no attribute 'wxyz'",
      "changes": [
        {
          "file": "numpy/__init__.py",
          "patch": "@@ -202,9 +202,8 @@ def __getattr__(attr):\n                 from .testing import Tester\n                 return Tester\n             else:\n-                raise AttributeError(\n-                    \"module %s has no attribute $s\".format(__name__, attr))\n-\n+                raise AttributeError(\"module {!r} has no attribute \"\n+                                     \"{!r}\".format(__name__, attr))\n \n         def __dir__():\n             return __all__ + ['Tester', 'testing']"
        }
      ]
    },
    {
      "sha": "feee90d9e14490daa2439eb37c8511555d073f92",
      "message": "MAINT: Change the type of error raised in set_printoptions (gh-13899)\n\nPreviously an incorrect ``threshold`` raised ``ValueError``; it now raises ``TypeError``\r\nfor non-numeric types and ``ValueError`` for ``nan`` values.",
      "changes": [
        {
          "file": "numpy/core/arrayprint.py",
          "patch": "@@ -89,8 +89,10 @@ def _make_options_dict(precision=None, threshold=None, edgeitems=None,\n                       \"`False`\", stacklevel=3)\n     if threshold is not None:\n         # forbid the bad threshold arg suggested by stack overflow, gh-12351\n-        if not isinstance(threshold, numbers.Number) or np.isnan(threshold):\n-            raise ValueError(\"threshold must be numeric and non-NAN, try \"\n+        if not isinstance(threshold, numbers.Number):\n+            raise TypeError(\"threshold must be numeric\")\n+        if np.isnan(threshold):\n+            raise ValueError(\"threshold must be non-NAN, try \"\n                              \"sys.maxsize for untruncated representation\")\n     return options\n "
        },
        {
          "file": "numpy/core/tests/test_arrayprint.py",
          "patch": "@@ -847,9 +847,9 @@ def test_edgeitems(self):\n         )\n \n     def test_bad_args(self):\n-        assert_raises(ValueError, np.set_printoptions, threshold='nan')\n-        assert_raises(ValueError, np.set_printoptions, threshold=u'1')\n-        assert_raises(ValueError, np.set_printoptions, threshold=b'1')\n+        assert_raises(ValueError, np.set_printoptions, threshold=float('nan'))\n+        assert_raises(TypeError, np.set_printoptions, threshold='1')\n+        assert_raises(TypeError, np.set_printoptions, threshold=b'1')\n \n def test_unicode_object_array():\n     import sys"
        }
      ]
    },
    {
      "sha": "76b83a7e49fc954ae79950da6e4481904a3f1a1c",
      "message": "BUG: blindly add TypeError to accepted exceptions",
      "changes": [
        {
          "file": "numpy/f2py/crackfortran.py",
          "patch": "@@ -2512,7 +2512,7 @@ def _eval_scalar(value, params):\n         value = value.split('_')[0]\n     try:\n         value = str(eval(value, {}, params))\n-    except (NameError, SyntaxError):\n+    except (NameError, SyntaxError, TypeError):\n         return value\n     except Exception as msg:\n         errmess('\"%s\" in evaluating %r '"
        }
      ]
    },
    {
      "sha": "0764929543c85decde9d664367dbf7d8f137fe1f",
      "message": "DEP: polynomial: Be stricter about integral arguments\n\nThis changes the behavior for:\n* The `deg`  and `axis` arguments of `<type>der`\n* The `deg`  and `axis` arguments of `<type>int`\n* The `deg`  argument of `<type>gauss`\n* The `deg`  argument of `<type>vander2d`\n* The `deg`  argument of `<type>vander3d`\n\nThe old behavior was:\n* Raise `ValueError` if the argument is a float, but not an integral one\n* Allow a float like `1.0` to mean `1`.\n\nThis is inconsistent with most other integer-accepting APIs in numpy, which require these to be actual integers, and raise TypeError when they are not.\n\nThe new behavior is:\n* Raise `TypeError` if the argument is a float, but not an integral one\n* Emit a `DeprecationWarning` if a float like `1.0` is passed, continuing to allow it its old meaning.",
      "changes": [
        {
          "file": "numpy/polynomial/tests/test_chebyshev.py",
          "patch": "@@ -221,12 +221,12 @@ class TestIntegral(object):\n \n     def test_chebint(self):\n         # check exceptions\n-        assert_raises(ValueError, cheb.chebint, [0], .5)\n+        assert_raises(TypeError, cheb.chebint, [0], .5)\n         assert_raises(ValueError, cheb.chebint, [0], -1)\n         assert_raises(ValueError, cheb.chebint, [0], 1, [0, 0])\n         assert_raises(ValueError, cheb.chebint, [0], lbnd=[0])\n         assert_raises(ValueError, cheb.chebint, [0], scl=[0])\n-        assert_raises(ValueError, cheb.chebint, [0], axis=.5)\n+        assert_raises(TypeError, cheb.chebint, [0], axis=.5)\n \n         # test integration of zero polynomial\n         for i in range(2, 5):\n@@ -323,7 +323,7 @@ class TestDerivative(object):\n \n     def test_chebder(self):\n         # check exceptions\n-        assert_raises(ValueError, cheb.chebder, [0], .5)\n+        assert_raises(TypeError, cheb.chebder, [0], .5)\n         assert_raises(ValueError, cheb.chebder, [0], -1)\n \n         # check that zeroth derivative does nothing"
        },
        {
          "file": "numpy/polynomial/tests/test_hermite.py",
          "patch": "@@ -209,12 +209,12 @@ class TestIntegral(object):\n \n     def test_hermint(self):\n         # check exceptions\n-        assert_raises(ValueError, herm.hermint, [0], .5)\n+        assert_raises(TypeError, herm.hermint, [0], .5)\n         assert_raises(ValueError, herm.hermint, [0], -1)\n         assert_raises(ValueError, herm.hermint, [0], 1, [0, 0])\n         assert_raises(ValueError, herm.hermint, [0], lbnd=[0])\n         assert_raises(ValueError, herm.hermint, [0], scl=[0])\n-        assert_raises(ValueError, herm.hermint, [0], axis=.5)\n+        assert_raises(TypeError, herm.hermint, [0], axis=.5)\n \n         # test integration of zero polynomial\n         for i in range(2, 5):\n@@ -311,7 +311,7 @@ class TestDerivative(object):\n \n     def test_hermder(self):\n         # check exceptions\n-        assert_raises(ValueError, herm.hermder, [0], .5)\n+        assert_raises(TypeError, herm.hermder, [0], .5)\n         assert_raises(ValueError, herm.hermder, [0], -1)\n \n         # check that zeroth derivative does nothing"
        },
        {
          "file": "numpy/polynomial/tests/test_hermite_e.py",
          "patch": "@@ -209,12 +209,12 @@ class TestIntegral(object):\n \n     def test_hermeint(self):\n         # check exceptions\n-        assert_raises(ValueError, herme.hermeint, [0], .5)\n+        assert_raises(TypeError, herme.hermeint, [0], .5)\n         assert_raises(ValueError, herme.hermeint, [0], -1)\n         assert_raises(ValueError, herme.hermeint, [0], 1, [0, 0])\n         assert_raises(ValueError, herme.hermeint, [0], lbnd=[0])\n         assert_raises(ValueError, herme.hermeint, [0], scl=[0])\n-        assert_raises(ValueError, herme.hermeint, [0], axis=.5)\n+        assert_raises(TypeError, herme.hermeint, [0], axis=.5)\n \n         # test integration of zero polynomial\n         for i in range(2, 5):\n@@ -311,7 +311,7 @@ class TestDerivative(object):\n \n     def test_hermeder(self):\n         # check exceptions\n-        assert_raises(ValueError, herme.hermeder, [0], .5)\n+        assert_raises(TypeError, herme.hermeder, [0], .5)\n         assert_raises(ValueError, herme.hermeder, [0], -1)\n \n         # check that zeroth derivative does nothing"
        },
        {
          "file": "numpy/polynomial/tests/test_laguerre.py",
          "patch": "@@ -206,12 +206,12 @@ class TestIntegral(object):\n \n     def test_lagint(self):\n         # check exceptions\n-        assert_raises(ValueError, lag.lagint, [0], .5)\n+        assert_raises(TypeError, lag.lagint, [0], .5)\n         assert_raises(ValueError, lag.lagint, [0], -1)\n         assert_raises(ValueError, lag.lagint, [0], 1, [0, 0])\n         assert_raises(ValueError, lag.lagint, [0], lbnd=[0])\n         assert_raises(ValueError, lag.lagint, [0], scl=[0])\n-        assert_raises(ValueError, lag.lagint, [0], axis=.5)\n+        assert_raises(TypeError, lag.lagint, [0], axis=.5)\n \n         # test integration of zero polynomial\n         for i in range(2, 5):\n@@ -308,7 +308,7 @@ class TestDerivative(object):\n \n     def test_lagder(self):\n         # check exceptions\n-        assert_raises(ValueError, lag.lagder, [0], .5)\n+        assert_raises(TypeError, lag.lagder, [0], .5)\n         assert_raises(ValueError, lag.lagder, [0], -1)\n \n         # check that zeroth derivative does nothing"
        },
        {
          "file": "numpy/polynomial/tests/test_legendre.py",
          "patch": "@@ -210,12 +210,12 @@ class TestIntegral(object):\n \n     def test_legint(self):\n         # check exceptions\n-        assert_raises(ValueError, leg.legint, [0], .5)\n+        assert_raises(TypeError, leg.legint, [0], .5)\n         assert_raises(ValueError, leg.legint, [0], -1)\n         assert_raises(ValueError, leg.legint, [0], 1, [0, 0])\n         assert_raises(ValueError, leg.legint, [0], lbnd=[0])\n         assert_raises(ValueError, leg.legint, [0], scl=[0])\n-        assert_raises(ValueError, leg.legint, [0], axis=.5)\n+        assert_raises(TypeError, leg.legint, [0], axis=.5)\n \n         # test integration of zero polynomial\n         for i in range(2, 5):\n@@ -312,7 +312,7 @@ class TestDerivative(object):\n \n     def test_legder(self):\n         # check exceptions\n-        assert_raises(ValueError, leg.legder, [0], .5)\n+        assert_raises(TypeError, leg.legder, [0], .5)\n         assert_raises(ValueError, leg.legder, [0], -1)\n \n         # check that zeroth derivative does nothing"
        },
        {
          "file": "numpy/polynomial/tests/test_polynomial.py",
          "patch": "@@ -291,12 +291,12 @@ class TestIntegral(object):\n \n     def test_polyint(self):\n         # check exceptions\n-        assert_raises(ValueError, poly.polyint, [0], .5)\n+        assert_raises(TypeError, poly.polyint, [0], .5)\n         assert_raises(ValueError, poly.polyint, [0], -1)\n         assert_raises(ValueError, poly.polyint, [0], 1, [0, 0])\n         assert_raises(ValueError, poly.polyint, [0], lbnd=[0])\n         assert_raises(ValueError, poly.polyint, [0], scl=[0])\n-        assert_raises(ValueError, poly.polyint, [0], axis=.5)\n+        assert_raises(TypeError, poly.polyint, [0], axis=.5)\n \n         # test integration of zero polynomial\n         for i in range(2, 5):\n@@ -388,7 +388,7 @@ class TestDerivative(object):\n \n     def test_polyder(self):\n         # check exceptions\n-        assert_raises(ValueError, poly.polyder, [0], .5)\n+        assert_raises(TypeError, poly.polyder, [0], .5)\n         assert_raises(ValueError, poly.polyder, [0], -1)\n \n         # check that zeroth derivative does nothing"
        }
      ]
    },
    {
      "sha": "148a07b5023bff303d0d07a2d7896c928642d9d4",
      "message": "chage ValueError to TypeError after review",
      "changes": [
        {
          "file": "numpy/core/records.py",
          "patch": "@@ -720,7 +720,7 @@ def fromstring(datastring, dtype=None, shape=None, offset=0, formats=None,\n     a string\"\"\"\n \n     if dtype is None and formats is None:\n-        raise ValueError(\"Must have dtype= or formats=\")\n+        raise TypeError(\"fromstring() needs a 'dtype' or 'formats' argument\")\n \n     if dtype is not None:\n         descr = sb.dtype(dtype)\n@@ -769,7 +769,7 @@ def fromfile(fd, dtype=None, shape=None, offset=0, formats=None,\n     \"\"\"\n     \n     if dtype is None and formats is None:\n-        raise ValueError(\"Must have dtype= or formats=\")\n+        raise TypeError(\"fromfile() needs a 'dtype' or 'formats' argument\")\n \n     if (shape is None or shape == 0):\n         shape = (-1,)"
        }
      ]
    },
    {
      "sha": "1842ea98e764d48e4d82636c995b86d1926fd124",
      "message": "BUG: IndexError for empty list on structured MaskedArray.\n\nThis should give an empty result, not an error.  The problem\nwas that the empty list was interpreted as a list of strings.",
      "changes": [
        {
          "file": "numpy/ma/core.py",
          "patch": "@@ -780,7 +780,7 @@ def fix_invalid(a, mask=nomask, copy=True, fill_value=None):\n \n def is_string_or_list_of_strings(val):\n     return (isinstance(val, basestring) or\n-            (isinstance(val, list) and\n+            (isinstance(val, list) and val and\n              builtins.all(isinstance(s, basestring) for s in val)))\n \n ###############################################################################\n@@ -6340,7 +6340,7 @@ def copy(self, *args, **kwargs):\n \n     def __copy__(self):\n         return self\n-\t\t\n+\n     def __deepcopy__(self, memo):\n         return self\n \n@@ -7089,7 +7089,7 @@ def where(condition, x=_NoValue, y=_NoValue):\n     Parameters\n     ----------\n     condition : array_like, bool\n-        Where True, yield `x`, otherwise yield `y`. \n+        Where True, yield `x`, otherwise yield `y`.\n     x, y : array_like, optional\n         Values from which to choose. `x`, `y` and `condition` need to be\n         broadcastable to some shape."
        },
        {
          "file": "numpy/ma/tests/test_regression.py",
          "patch": "@@ -84,3 +84,8 @@ def test_mask_not_backmangled(self):\n         assert_(a.mask.shape == (2,))\n         assert_(b.shape == (2, 2))\n         assert_(b.mask.shape == (2, 2))\n+\n+    def test_empty_list_on_structured(self):\n+        # See gh-12464. Indexing with empty list should give empty result.\n+        ma = np.ma.MaskedArray([(1, 1.), (2, 2.), (3, 3.)], dtype='i4,f4')\n+        assert_array_equal(ma[[]], ma[:0])"
        }
      ]
    },
    {
      "sha": "470d53fc6bc8267fec7d7cf5c7116d5e7437d789",
      "message": "BUG: improve DataSource __del__\n\n* DataSource __del__ could raise an AttributeError\nif __init__ failed for any reason; __del__ now gracefully\nhandles the case where __init__ fails, as happens in the\ninternals of refguide_check when handling DataSource with\nan unexpected kwarg",
      "changes": [
        {
          "file": "numpy/lib/_datasource.py",
          "patch": "@@ -323,7 +323,7 @@ def __init__(self, destpath=os.curdir):\n \n     def __del__(self):\n         # Remove temp directories\n-        if self._istmpdest:\n+        if hasattr(self, '_istmpdest') and self._istmpdest:\n             shutil.rmtree(self._destpath)\n \n     def _iszip(self, filename):"
        }
      ]
    },
    {
      "sha": "af82b54c1f18f811232f40e4c8b1f1ca96ee2966",
      "message": "MAINT: dtype(unicode) should raise TypeError on failure",
      "changes": [
        {
          "file": "numpy/core/tests/test_dtype.py",
          "patch": "@@ -729,6 +729,7 @@ def test_dtypes_are_true():\n def test_invalid_dtype_string():\n     # test for gh-10440\n     assert_raises(TypeError, np.dtype, 'f8,i8,[f8,i8]')\n+    assert_raises(TypeError, np.dtype, u'Fl\\xfcgel')\n \n \n class TestFromCTypes(object):"
        }
      ]
    },
    {
      "sha": "a87168023f0e99e2481c62855f2e14f4653a1a46",
      "message": "API: isposinf and isneginf now raise TypeError instead of ValueError for complex values",
      "changes": [
        {
          "file": "numpy/lib/tests/test_ufunclike.py",
          "patch": "@@ -22,7 +22,7 @@ def test_isposinf(self):\n         assert_equal(out, tgt)\n \n         a = a.astype(np.complex)\n-        with assert_raises(ValueError):\n+        with assert_raises(TypeError):\n             ufl.isposinf(a)\n \n     def test_isneginf(self):\n@@ -37,7 +37,7 @@ def test_isneginf(self):\n         assert_equal(out, tgt)\n \n         a = a.astype(np.complex)\n-        with assert_raises(ValueError):\n+        with assert_raises(TypeError):\n             ufl.isneginf(a)\n \n     def test_fix(self):"
        }
      ]
    },
    {
      "sha": "e988535a06c8150e28e6858d7be0a5d2f7e08fa9",
      "message": "BUG: Fixed polydiv for Complex Numbers (#10473)\n\nThis previously failed with:\r\n\r\nTypeError: Cannot cast ufunc subtract output from dtype('complex128') to dtype('float64') with casting rule 'same_kind'",
      "changes": [
        {
          "file": "numpy/lib/polynomial.py",
          "patch": "@@ -897,7 +897,7 @@ def polydiv(u, v):\n     n = len(v) - 1\n     scale = 1. / v[0]\n     q = NX.zeros((max(m - n + 1, 1),), w.dtype)\n-    r = u.copy()\n+    r = u.astype(w.dtype)\n     for k in range(0, m-n+1):\n         d = scale * r[k]\n         q[k] = d"
        }
      ]
    },
    {
      "sha": "2bc15496aa2d1717aeb0d2be3c882eb1982215f8",
      "message": "BUG: Passing an incorrect type to dtype.__getitem__ should raise TypeError\n\nAlso allows any object implementing __index__ to be passed to\ndtype.__getitem__",
      "changes": [
        {
          "file": "numpy/core/tests/test_dtype.py",
          "patch": "@@ -2,6 +2,7 @@\n \n import pickle\n import sys\n+import operator\n \n import numpy as np\n from numpy.core.test_rational import rational\n@@ -306,6 +307,11 @@ def test_fields_by_index(self):\n         assert_dtype_equal(dt[-2], dt[0])\n         assert_raises(IndexError, lambda: dt[-3])\n \n+        assert_raises(TypeError, operator.getitem, dt, 3.0)\n+        assert_raises(TypeError, operator.getitem, dt, [])\n+\n+        assert_equal(dt[1], dt[np.int8(1)])\n+\n \n class TestSubarray(object):\n     def test_single_subarray(self):"
        },
        {
          "file": "numpy/core/tests/test_multiarray.py",
          "patch": "@@ -4606,7 +4606,7 @@ def test_bytes_fields(self):\n             assert_raises(TypeError, np.dtype, [(('b', b'a'), int)])\n \n             dt = np.dtype([((b'a', 'b'), int)])\n-            assert_raises(ValueError, dt.__getitem__, b'a')\n+            assert_raises(TypeError, dt.__getitem__, b'a')\n \n             x = np.array([(1,), (2,), (3,)], dtype=dt)\n             assert_raises(IndexError, x.__getitem__, b'a')"
        },
        {
          "file": "numpy/core/tests/test_regression.py",
          "patch": "@@ -1352,7 +1352,7 @@ def test_dtype_keyerrors_(self):\n         dt = np.dtype([('f1', np.uint)])\n         assert_raises(KeyError, dt.__getitem__, \"f2\")\n         assert_raises(IndexError, dt.__getitem__, 1)\n-        assert_raises(ValueError, dt.__getitem__, 0.0)\n+        assert_raises(TypeError, dt.__getitem__, 0.0)\n \n     def test_lexsort_buffer_length(self):\n         # Ticket #1217, don't segfault."
        }
      ]
    },
    {
      "sha": "be08980377cf2cd0c136e32eb0c644d392e5c7be",
      "message": "MAINT: remove try..except clause.\n- Generator type has been added to types module in 2.2 we do not need to catch AttributeError",
      "changes": [
        {
          "file": "numpy/core/fromnumeric.py",
          "patch": "@@ -28,12 +28,7 @@\n     'std', 'sum', 'swapaxes', 'take', 'trace', 'transpose', 'var',\n     ]\n \n-\n-try:\n-    _gentype = types.GeneratorType\n-except AttributeError:\n-    _gentype = type(None)\n-\n+_gentype = types.GeneratorType\n # save away Python sum\n _sum_ = sum\n "
        }
      ]
    },
    {
      "sha": "a343a78a19d2b44dff753062acf54304e34dd0a6",
      "message": "BUG: fix distutils/cpuinfo.py:getoutput()\n\nIf getstatusoutput() throws an exception, getoutput() tries to catch it,\nbut then crashes with:\n\n  UnboundLocalError: local variable 'output' referenced before assignment\n\nbecause it tries to return the non-existent result of getstatusoutput().",
      "changes": [
        {
          "file": "numpy/distutils/cpuinfo.py",
          "patch": "@@ -35,7 +35,7 @@ def getoutput(cmd, successful_status=(0,), stacklevel=1):\n     except EnvironmentError:\n         e = get_exception()\n         warnings.warn(str(e), UserWarning, stacklevel=stacklevel)\n-        return False, output\n+        return False, \"\"\n     if os.WIFEXITED(status) and os.WEXITSTATUS(status) in successful_status:\n         return True, output\n     return False, output"
        }
      ]
    },
    {
      "sha": "370b6506f128460371484a50c813d66e64582f44",
      "message": "MAINT: Use normalize_axis_index in all python axis checking\n\nAs a result, some exceptions change from ValueError to IndexError\n\nThis also changes the exception types raised in places where\nnormalize_axis_index is not quite appropriate",
      "changes": [
        {
          "file": "numpy/core/shape_base.py",
          "patch": "@@ -5,6 +5,7 @@\n \n from . import numeric as _nx\n from .numeric import asanyarray, newaxis\n+from .multiarray import normalize_axis_index\n \n def atleast_1d(*arys):\n     \"\"\"\n@@ -347,11 +348,7 @@ def stack(arrays, axis=0):\n         raise ValueError('all input arrays must have the same shape')\n \n     result_ndim = arrays[0].ndim + 1\n-    if not -result_ndim <= axis < result_ndim:\n-        msg = 'axis {0} out of bounds [-{1}, {1})'.format(axis, result_ndim)\n-        raise IndexError(msg)\n-    if axis < 0:\n-        axis += result_ndim\n+    axis = normalize_axis_index(axis, result_ndim)\n \n     sl = (slice(None),) * axis + (_nx.newaxis,)\n     expanded_arrays = [arr[sl] for arr in arrays]"
        },
        {
          "file": "numpy/linalg/tests/test_linalg.py",
          "patch": "@@ -1102,8 +1102,8 @@ def test_bad_args(self):\n             assert_raises(ValueError, norm, B, order, (1, 2))\n \n         # Invalid axis\n-        assert_raises(ValueError, norm, B, None, 3)\n-        assert_raises(ValueError, norm, B, None, (2, 3))\n+        assert_raises(IndexError, norm, B, None, 3)\n+        assert_raises(IndexError, norm, B, None, (2, 3))\n         assert_raises(ValueError, norm, B, None, (0, 1, 2))\n \n "
        }
      ]
    },
    {
      "sha": "3caf1223b9b8e4747fb7b41b2fbd2122ee175d03",
      "message": "BUG: Fix IndexError in fromrecords\n\nThis fixes:\n * The case when len(recList) == 0 and dtype is not None\n * The case when np.ndim(recList) > 1\n\nIn both cases, this would previously IndexError",
      "changes": [
        {
          "file": "numpy/core/records.py",
          "patch": "@@ -624,7 +624,6 @@ def fromarrays(arrayList, dtype=None, shape=None, formats=None,\n \n     return _array\n \n-# shape must be 1-d if you use list of lists...\n def fromrecords(recList, dtype=None, shape=None, formats=None, names=None,\n                 titles=None, aligned=False, byteorder=None):\n     \"\"\" create a recarray from a list of records in text form\n@@ -655,10 +654,9 @@ def fromrecords(recList, dtype=None, shape=None, formats=None, names=None,\n     [(456, 'dbe', 1.2) (2, 'de', 1.3)]\n     \"\"\"\n \n-    nfields = len(recList[0])\n     if formats is None and dtype is None:  # slower\n         obj = sb.array(recList, dtype=object)\n-        arrlist = [sb.array(obj[..., i].tolist()) for i in range(nfields)]\n+        arrlist = [sb.array(obj[..., i].tolist()) for i in range(obj.shape[-1])]\n         return fromarrays(arrlist, formats=formats, shape=shape, names=names,\n                           titles=titles, aligned=aligned, byteorder=byteorder)\n "
        }
      ]
    },
    {
      "sha": "c9adc35e68b92b10ab0b20069465fd784388bc14",
      "message": "DEP: Raise TypeError for subtract(bool_, bool_).\n\nSubtracting a bool_ from a bool_ was deprecated in NumPy 1.9",
      "changes": [
        {
          "file": "numpy/core/tests/test_umath.py",
          "patch": "@@ -1005,6 +1005,7 @@ class TestBool(TestCase):\n     def test_exceptions(self):\n         a = np.ones(1, dtype=np.bool_)\n         assert_raises(TypeError, np.negative, a)\n+        assert_raises(TypeError, np.subtract, a, a)\n \n     def test_truth_table_logical(self):\n         # 2, 3 and 4 serves as true values"
        }
      ]
    },
    {
      "sha": "ff097d486887ae0a8eae4f3ecc2adece1c63ac43",
      "message": "DEP: Raise TypeError for np.negative(bool_).\n\nThe unary minus of booleans was deprecated in NumPy 1.9.",
      "changes": [
        {
          "file": "numpy/core/tests/test_umath.py",
          "patch": "@@ -1002,6 +1002,10 @@ def test_complex_nans(self):\n \n \n class TestBool(TestCase):\n+    def test_exceptions(self):\n+        a = np.ones(1, dtype=np.bool_)\n+        assert_raises(TypeError, np.negative, a)\n+\n     def test_truth_table_logical(self):\n         # 2, 3 and 4 serves as true values\n         input1 = [0, 0, 3, 2]"
        }
      ]
    },
    {
      "sha": "cac80b81702da8816a4cb0925233f0bd9e64837a",
      "message": "ENH: either TypeError or ValueError can be raised",
      "changes": [
        {
          "file": "numpy/ma/mrecords.py",
          "patch": "@@ -654,13 +654,13 @@ def _guessvartypes(arr):\n     for f in arr:\n         try:\n             int(f)\n-        except ValueError:\n+        except (ValueError, TypeError):\n             try:\n                 float(f)\n-            except ValueError:\n+            except (ValueError, TypeError):\n                 try:\n                     complex(f)\n-                except ValueError:\n+                except (ValueError, TypeError):\n                     vartypes.append(arr.dtype)\n                 else:\n                     vartypes.append(np.dtype(complex))"
        }
      ]
    },
    {
      "sha": "8894b81b166f6b0c200dde77a70fb360e95b0f7c",
      "message": "BUG: Fix TypeError when raising TypeError\n\nFixes \"TypeError: pop expected at least 1 arguments, got 0\"",
      "changes": [
        {
          "file": "numpy/lib/stride_tricks.py",
          "patch": "@@ -244,7 +244,7 @@ def broadcast_arrays(*args, **kwargs):\n     subok = kwargs.pop('subok', False)\n     if kwargs:\n         raise TypeError('broadcast_arrays() got an unexpected keyword '\n-                        'argument {}'.format(kwargs.pop()))\n+                        'argument {!r}'.format(kwargs.keys()[0]))\n     args = [np.array(_m, copy=False, subok=subok) for _m in args]\n \n     shape = _broadcast_shape(*args)"
        }
      ]
    },
    {
      "sha": "02bcbd7e99f7b73c2abcb2726f79ea01a6bba2da",
      "message": "DOC, MAINT: Enforce np.ndarray arg for np.put and np.place\n\nnp.put and np.place do something only when the first argument\nis an instance of np.ndarray. These changes will cause a TypeError\nto be thrown in either function should that requirement not be\nsatisfied.",
      "changes": [
        {
          "file": "numpy/lib/function_base.py",
          "patch": "@@ -1779,7 +1779,7 @@ def place(arr, mask, vals):\n \n     Parameters\n     ----------\n-    arr : array_like\n+    arr : ndarray\n         Array to put data into.\n     mask : array_like\n         Boolean mask array. Must have the same size as `a`.\n@@ -1801,6 +1801,10 @@ def place(arr, mask, vals):\n            [44, 55, 44]])\n \n     \"\"\"\n+    if not isinstance(arr, np.ndarray):\n+        raise TypeError(\"argument 1 must be numpy.ndarray, \"\n+                        \"not {name}\".format(name=type(arr).__name__))\n+\n     return _insert(arr, mask, vals)\n \n "
        },
        {
          "file": "numpy/lib/tests/test_function_base.py",
          "patch": "@@ -674,6 +674,10 @@ def test_basic(self):\n         assert_array_equal(b, [3, 2, 2, 3, 3])\n \n     def test_place(self):\n+        # Make sure that non-np.ndarray objects\n+        # raise an error instead of doing nothing\n+        assert_raises(TypeError, place, [1, 2, 3], [True, False], [0, 1])\n+\n         a = np.array([1, 4, 3, 2, 5, 8, 7])\n         place(a, [0, 1, 0, 1, 0, 1, 0], [2, 4, 6])\n         assert_array_equal(a, [1, 2, 3, 4, 5, 6, 7])"
        },
        {
          "file": "numpy/lib/tests/test_regression.py",
          "patch": "@@ -85,10 +85,6 @@ def test_poly_eq(self, level=rlevel):\n         assert_(x != y)\n         assert_(x == x)\n \n-    def test_mem_insert(self, level=rlevel):\n-        # Ticket #572\n-        np.lib.place(1, 1, 1)\n-\n     def test_polyfit_build(self):\n         # Ticket #628\n         ref = [-1.06123820e-06, 5.70886914e-04, -1.13822012e-01,"
        }
      ]
    },
    {
      "sha": "9b59edebeadddf8012459e401434353b2de8babb",
      "message": "BUG: fix AttributeError in numpy/distutils.\n\nCorrects an AttributeError on windows in some cases caused by #6185",
      "changes": [
        {
          "file": "numpy/distutils/ccompiler.py",
          "patch": "@@ -385,10 +385,11 @@ def CCompiler_customize(self, dist, need_cxx=0):\n                     a, b = 'cc', 'c++'\n                 self.compiler_cxx = [self.compiler[0].replace(a, b)]\\\n                                     + self.compiler[1:]\n-        elif not self.compiler_cxx:\n+        else:\n             if hasattr(self, 'compiler'):\n                 log.warn(\"#### %s #######\" % (self.compiler,))\n-            log.warn('Missing compiler_cxx fix for '+self.__class__.__name__)\n+            if not hasattr(self, 'compiler_cxx'):\n+                log.warn('Missing compiler_cxx fix for ' + self.__class__.__name__)\n     return\n \n replace_method(CCompiler, 'customize', CCompiler_customize)"
        }
      ]
    },
    {
      "sha": "0e8edab421e3b20ff2f4085e06040101c2d9865f",
      "message": "BUG: digitize segfaults on TypeError\n\nThe new searchsorted-based digitize introduced in #5101 segfaults\nwhen it should raise a TypeError.",
      "changes": [
        {
          "file": "numpy/lib/tests/test_function_base.py",
          "patch": "@@ -861,6 +861,13 @@ def test_monotonic(self):\n         bins = [1, 1, 0, 1]\n         assert_raises(ValueError, digitize, x, bins)\n \n+    def test_casting_error(self):\n+        x = [1, 2, 3+1.j]\n+        bins = [1, 2, 3]\n+        assert_raises(TypeError, digitize, x, bins)\n+        x, bins = bins, x\n+        assert_raises(TypeError, digitize, x, bins)\n+\n \n class TestUnwrap(TestCase):\n     def test_simple(self):"
        }
      ]
    },
    {
      "sha": "3eb219fd97200282b6aed9fe760e843d4916bc06",
      "message": "BUG: Fix bugs in unused code paths.\n\nThe `getargspec` needed to import the disassembler to support parsing\ntuple arguments. Since numpy never uses those, the corresponding code\nis deleted and an TypeError raised if such arguments are encountered.\n\nAlso fix the unused formatargs function so it does not require the\nstring module.",
      "changes": [
        {
          "file": "numpy/compat/tests/test_compat.py",
          "patch": "@@ -1,7 +1,7 @@\n from os.path import join\n \n from numpy.compat import isfileobj\n-from numpy.testing import TestCase, assert_\n+from numpy.testing import assert_\n from numpy.testing.utils import tempdir\n \n "
        }
      ]
    },
    {
      "sha": "a98b6b4ef12d09c51e5c9f015992c5b2ae164607",
      "message": "Fix stride_stricks.as_strided function for object arrays\n\nCurrently, calling as_strided for object array results in 'TypeError: Cannot change data-type for object array.'. Fix so that dtype of new array is only set for void dtype, as originally intended.",
      "changes": [
        {
          "file": "numpy/lib/stride_tricks.py",
          "patch": "@@ -29,7 +29,8 @@ def as_strided(x, shape=None, strides=None):\n         interface['strides'] = tuple(strides)\n     array = np.asarray(DummyArray(interface, base=x))\n     # Make sure dtype is correct in case of custom dtype\n-    array.dtype = x.dtype\n+    if array.dtype.kind == 'V':\n+        array.dtype = x.dtype\n     return array\n \n def broadcast_arrays(*args):"
        }
      ]
    },
    {
      "sha": "8015369a4f1357e690199090d84fa8fde99ed6a3",
      "message": "Do not fail with NameError if SandboxViolation is raised",
      "changes": [
        {
          "file": "numpy/distutils/system_info.py",
          "patch": "@@ -217,6 +217,7 @@ def libpaths(paths, bits):\n                                              '/usr/include/X11'])\n \n     import subprocess as sp\n+    tmp = None\n     try:\n         # Explicitly open/close file to avoid ResourceWarning when\n         # tests are run in debug mode Python 3.\n@@ -234,7 +235,8 @@ def libpaths(paths, bits):\n             default_x11_lib_dirs += [os.path.join(\"/usr/lib/\", triplet)]\n             default_lib_dirs += [os.path.join(\"/usr/lib/\", triplet)]\n     finally:\n-        tmp.close()\n+        if tmp is not None:\n+            tmp.close()\n \n if os.path.join(sys.prefix, 'lib') not in default_lib_dirs:\n     default_lib_dirs.insert(0, os.path.join(sys.prefix, 'lib'))"
        }
      ]
    },
    {
      "sha": "fc4ade26312bd66474834aa0bee42265e7e15353",
      "message": "ENH: Fix SyntaxError when matrix() is called with invalid string\n\nThe numpy.matrix constructor uses eval(str.translate(table)) to convert\ninput strings to numeric matrix contents. str.translate(table) will\nreturn empty string if str consists only of invalid characters, causing\nSyntaxError in eval(). This is confusing, as one would expect an\nexception like TypeError when trying to construct a matrix from invalid\ninput.\n\nThis fix makes sure eval() is only called if str is not empty and\nTypeError is raised otherwise.",
      "changes": [
        {
          "file": "numpy/matrixlib/tests/test_defmatrix.py",
          "patch": "@@ -31,6 +31,10 @@ def test_basic(self):\n         mvec = matrix(vec)\n         assert_(mvec.shape == (1,5))\n \n+    def test_exceptions(self):\n+        # Check for TypeError when called with invalid string data.\n+        assert_raises(TypeError, matrix, \"invalid\")\n+\n     def test_bmat_nondefault_str(self):\n         A = array([[1,2],[3,4]])\n         B = array([[5,6],[7,8]])"
        }
      ]
    },
    {
      "sha": "9466880fc907ddf864aab47aff0642a4cb57aaf6",
      "message": "MAINT: Error type fixup and clearer error message\n\nThe first error types were changed to ValueError (or introduced)\nnewly. Python seems to normally use IndexError or TypeError here,\nso changing back to IndexError.\n\nThe second is just a clarification to say when the error actually\noccurs for the user.",
      "changes": [
        {
          "file": "numpy/core/tests/test_indexing.py",
          "patch": "@@ -70,8 +70,8 @@ def test_single_int_index(self):\n \n         # Index out of bounds produces IndexError\n         assert_raises(IndexError, a.__getitem__, 1<<30)\n-        # Index overflow produces ValueError\n-        assert_raises(ValueError, a.__getitem__, 1<<64)\n+        # Index overflow produces IndexError\n+        assert_raises(IndexError, a.__getitem__, 1<<64)\n \n     def test_single_bool_index(self):\n         # Single boolean index"
        }
      ]
    },
    {
      "sha": "230ee3aa201552a8a9fa13c4b319f68cbd504d85",
      "message": "BUG: non-empty takes on empty axes failed for clip/wrap logic\n\nThese did no checking for this special case. And thus, wrap would go\ninto infinite loops trying to adjust the index, and clip would (probably)\nsegfault. This raises IndexError explicitely beforehand.",
      "changes": [
        {
          "file": "numpy/core/tests/test_indexerrors.py",
          "patch": "@@ -10,6 +10,8 @@ def test_arraytypes_fasttake(self):\n         x = np.empty((2, 3, 0, 4))\n         assert_raises(IndexError, x.take, [0], axis=2)\n         assert_raises(IndexError, x.take, [1], axis=2)\n+        assert_raises(IndexError, x.take, [0], axis=2, mode='wrap')\n+        assert_raises(IndexError, x.take, [0], axis=2, mode='clip')\n \n     def test_take_from_object(self):\n         # Check exception taking from object array\n@@ -21,6 +23,8 @@ def test_take_from_object(self):\n         assert_raises(IndexError, d.take, [1], axis=1)\n         assert_raises(IndexError, d.take, [0], axis=1)\n         assert_raises(IndexError, d.take, [0])\n+        assert_raises(IndexError, d.take, [0], mode='wrap')\n+        assert_raises(IndexError, d.take, [0], mode='clip')\n \n     def test_multiindex_exceptions(self):\n         a = np.empty(5, dtype=object)"
        }
      ]
    }
  ]
}